version: '3.6'

networks:
  virtual-network:
    driver: bridge
  # gitea:
  #   external: false

# volumes:
#     prometheus_data: {}
#     grafana_data: {}

services:

# step-ca

  step-ca:
    container_name: step-ca
    image: smallstep/step-ca
    restart: unless-stopped
    volumes:
      - /data/containers_data/step-ca:/home/step
    networks:
      - virtual-network
    ports:
      - "9000:9000"
    dns:
      - 192.168.0.125

# traefik
  traefik:
    image: "traefik:latest"
    container_name: "traefik"
    restart: unless-stopped
    environment:
      LEGO_CA_CERTIFICATES: "/usr/local/share/ca-certificates/pwn-ca-bundle.pem"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - virtual-network
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/usr/local/share/ca-certificates/pwn-ca-bundle.pem:/usr/local/share/ca-certificates/pwn-ca-bundle.pem:ro"
      - "/data/containers_data/traefik/configs/traefik.yml:/traefik.yml:ro"
      - "/data/containers_data/traefik/certs:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.rule=Host(`traefik.pwn.dev`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=pwn-ca"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=pwnlxrd:${traefik_pass}"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
    depends_on:
      - "step-ca"

# monitorings service

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - /data/containers_data/prometheus/etc:/etc/prometheus
      - /data/containers_data/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - 9090:9090
    networks:
      - virtual-network
    labels:
      org.label-schema.group: "monitoring"

  blackbox:
    container_name: blackbox
    image: prom/blackbox-exporter
    #ports:
    # - 9115:9115
    networks:
      - virtual-network
    volumes:
      - /data/containers_data/prometheus/etc/blackbox:/etc/blackboxexporter
    command:
      - '--config.file=/etc/blackboxexporter/config.yml'
      - '--log.level=debug'
    restart: always
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    volumes:
      - /data/containers_data/alertmanager/etc:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    ports:
      - 9093:9093
    networks:
      - virtual-network
    labels:
      org.label-schema.group: "monitoring"

  nodeexporter:
    image: prom/node-exporter:latest
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    ports:
      - 9100:9100
    networks:
      - virtual-network
    labels:
      org.label-schema.group: "monitoring"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    ports:
      - 8080:8080
    networks:
      - virtual-network
    labels:
      org.label-schema.group: "monitoring"

# Grafana

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - /data/containers_data/grafana/data:/var/lib/grafana
      - /data/containers_data/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - /data/containers_data/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    # ports:
    #   - 3011:3000
    networks:
      - virtual-network
    # labels:
    #   org.label-schema.group: "monitoring"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.pwn.dev`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=pwn-ca"
      - "traefik.http.services.grafana-service.loadbalancer.server.port=3000"

  pushgateway:
    image: prom/pushgateway:v1.4.1
    container_name: pushgateway
    restart: unless-stopped
    ports:
      - 9091:9091
    networks:
      - virtual-network
    labels:
      org.label-schema.group: "monitoring"

# gitea and db

  gitea-db: 
    container_name: postresqlG
    image: postgres:13.5-bullseye
    restart: unless-stopped
    environment:
      - POSTGRES_USER=gitea-admin-db
      - POSTGRES_PASSWORD=${gitea_db_pass}
      - POSTGRES_DB=gitea-db
    networks:
      - virtual-network
    volumes:
      - /data/containers_data/gitea/gitea_data_db:/var/lib/postgresql/data


  gitea:
    image: gitea/gitea:latest
    container_name: gitea
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - DB_TYPE=postgres
      - DB_HOST=gitea-db:5432
      - DB_NAME=gitea-db
      - DB_USER=gitea-admin-db
      - DB_PASSWD=${gitea_db_pass}
    restart: unless-stopped
    networks:
      - virtual-network
    volumes:
      - /data/containers_data/gitea/gitea_data:/data/gitea
      - /data/containers_data/gitea/gitea_repo:/data/git
      - /data/containers_data/gitea/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "223:22"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gitea.rule=Host(`git.pwn.dev`)"
      - "traefik.http.routers.gitea.entrypoints=websecure"
      - "traefik.http.routers.gitea.tls.certresolver=pwn-ca"
      - "traefik.http.services.gitea-service.loadbalancer.server.port=3000"
    depends_on:
      - gitea-db

#heimdall

  heimdall:
    image: linuxserver/heimdall:latest
    container_name: heimdall
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /data/containers_data/heimdall/config:/config
    networks:
      - virtual-network
    environment:
      - PGID=1000
      - PUID=1000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.heimdall.rule=Host(`welcome.pwn.dev`)"
      - "traefik.http.routers.heimdall.entrypoints=websecure"
      - "traefik.http.routers.heimdall.tls.certresolver=pwn-ca"
      - "traefik.http.services.heimdall-service.loadbalancer.server.port=80"

#searx and filter

  filtron:
    container_name: filtron
    image: dalf/filtron
    restart: always
    #ports:
    #  - "127.0.0.1:4040:4040"
    #  - "127.0.0.1:4041:4041"
    networks:
      - virtual-network
    command: -listen 0.0.0.0:4040 -api 0.0.0.0:4041 -target searx:8080
    volumes:
      - /data/containers_data/searx/rules.json:/etc/filtron/rules.json:rw
    read_only: true
    cap_drop:
      - ALL

  searx:
    container_name: searx
    image: searx/searx:latest
    restart: always
    networks:
      - virtual-network
    command: -f
    volumes:
      - /data/containers_data/searx/configs:/etc/searx:rw
    environment:
      - BIND_ADDRESS=0.0.0.0:8080
      - BASE_URL=https://searx.pwn.dev/
      - MORTY_URL=https://searx.pwn.dev/morty/
      - MORTY_KEY=${morty_key_secret}
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.searx.rule=Host(`searx.pwn.dev`)"
      - "traefik.http.routers.searx.entrypoints=websecure"
      - "traefik.http.routers.searx.tls.certresolver=pwn-ca"
      - "traefik.http.services.searx-service.loadbalancer.server.port=8080"

  morty:
    container_name: morty
    image: dalf/morty
    restart: always
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - virtual-network
    command: -timeout 6 -ipv6
    environment:
      - MORTY_KEY=${morty_key_secret}
      - MORTY_ADDRESS=0.0.0.0:3000
    #logging:
    #  driver: none
    read_only: true
    cap_drop:
      - ALL

# #main dev-server

#   dev-server-main:
#     container_name: dev-server-main
#     image: dev-server:x86
#     network_mode: bridge
#     volumes:
#       - "/home/pwnlxrd/.ssh/authorized_keys:/home/user/.ssh/authorized_keys:ro"
#       - /data/share:/data
#     ports:
#       - "7001:22"
#       - "8000:8000"
#     restart: unless-stopped

# #mail service
#   mailserver:
#     image: docker.io/mailserver/docker-mailserver:latest
#     container_name: mailserver
#     # If the FQDN for your mail-server is only two labels (eg: example.com),
#     # you can assign this entirely to `hostname` and remove `domainname`.
#     hostname: mail
#     domainname: pwndev.com
#     env_file: .env
#     # More information about the mail-server ports:
#     # https://docker-mailserver.github.io/docker-mailserver/edge/config/security/understanding-the-ports/
#     # To avoid conflicts with yaml base-60 float, DO NOT remove the quotation marks.
#     networks:
#       - virtual-network
#     ports:
#       - "25:25"    # SMTP  (explicit TLS => STARTTLS)
#       - "143:143"  # IMAP4 (explicit TLS => STARTTLS)
#       - "465:465"  # ESMTP (implicit TLS)
#       - "587:587"  # ESMTP (explicit TLS => STARTTLS)
#       - "993:993"  # IMAP4 (implicit TLS)
#     volumes:
#       - /data/containers_data/dms/mail-data/:/var/mail/
#       - /data/containers_data/dms/mail-state/:/var/mail-state/
#       - /data/containers_data/dms/mail-logs/:/var/log/mail/
#       - /data/containers_data/dms/config/:/tmp/docker-mailserver/
#       - /etc/localtime:/etc/localtime:ro
#     restart: always
#     stop_grace_period: 1m
#     cap_add:
#       - NET_ADMIN
#       - SYS_PTRACE

#drone ci
  drone:
    container_name: drone-server
    image: drone/drone:latest
    restart: always
    networks:
      - virtual-network
    volumes:
      - /data/containers_data/drone:/data
    environment:
      - DRONE_GITEA_SERVER=https://git.pwndev.com
      - DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}
      - DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_SERVER_HOST=drone-server
      - DRONE_SERVER_PROTO=http
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.drone.rule=Host(`drone.pwn.dev`)"
      - "traefik.http.routers.drone.entrypoints=websecure"
      - "traefik.http.routers.drone.tls.certresolver=pwn-ca"
      - "traefik.http.services.drone-service.loadbalancer.server.port=80"

  drone-runner1:
    container_name: drone-runner-main
    image: drone/agent:latest
    restart: always
    networks:
      - virtual-network
    volumes:
      - /data/share/projects:/data-project
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone-server
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_RUNNER_NAME=main-docker-runner
    depends_on:
      - "drone"

# Docker registry
  registry:
    container_name: registry-server
    restart: always
    image: registry:2
    networks:
      - virtual-network
    environment:
      REGISTRY_HTTP_ADDR: 0.0.0.0:443
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
      REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
    volumes:
      - /data/containers_data/registry/data:/var/lib/registry
      - /data/containers_data/registry/auth:/auth
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.registry.rule=Host(`registry.pwn.dev`)"
      - "traefik.http.routers.registry.entrypoints=websecure"
      - "traefik.http.routers.registry.tls.certresolver=pwn-ca"
      - "traefik.http.services.registry-service.loadbalancer.server.port=443"

#
  mysql-semaphore:
    networks:
      - virtual-network
    image: mysql:5.6
    hostname: mysql-semaphore
    volumes:
      - /data/containers_data/semaphore/mysql/:/var/lib/mysql
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
      MYSQL_DATABASE: semaphore
      MYSQL_USER: semaphore
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

  semaphore:
    networks:
      - virtual-network
    image: ansiblesemaphore/semaphore:latest
    environment:
      SEMAPHORE_DB_USER: semaphore
      SEMAPHORE_DB_PASS: ${MYSQL_PASSWORD}
      SEMAPHORE_DB_HOST: mysql-semaphore
      SEMAPHORE_DB_PORT: 3306
      SEMAPHORE_DB: semaphore
      SEMAPHORE_PLAYBOOK_PATH: /tmp/semaphore/
      SEMAPHORE_ADMIN_PASSWORD: ${SEMAPHORE_ADMIN_PASSWORD}
      SEMAPHORE_ADMIN_NAME: pwnlxrd
      SEMAPHORE_ADMIN_EMAIL: admin@pwndev.com
      SEMAPHORE_ADMIN: pwnlxrd
    volumes:
      - /data/containers_data/semaphore/data:/opt/data/semaphore
      - /data/containers_data/semaphore/config/:/etc/semaphore/
    depends_on:
      - mysql-semaphore
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.semaphore.rule=Host(`ansible.pwn.dev`)"
      - "traefik.http.routers.semaphore.entrypoints=websecure"
      - "traefik.http.routers.semaphore.tls.certresolver=pwn-ca"
      - "traefik.http.services.semaphore-service.loadbalancer.server.port=3000"

#jenkins
  jenkins:
    image: jenkins/jenkins:latest
    privileged: true
    user: root
    networks:
      - virtual-network
    ports:
      - 50000:50000
    container_name: jenkins
    volumes:
      - /data/containers_data/jenkins:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/local/bin/docker:/usr/local/bin/docker
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jenkins.rule=Host(`jenkins.pwn.dev`)"
      - "traefik.http.routers.jenkins.entrypoints=websecure"
      - "traefik.http.routers.jenkins.tls.certresolver=pwn-ca"
      - "traefik.http.services.jenkins-service.loadbalancer.server.port=8080"

  shieldsio:
    image: shieldsio/shields:next
    networks:
      - virtual-network
    container_name: shieldsio
    volumes:
      - /data/containers_data/shields/production.yml:/usr/src/app/config/production.yml:ro
    #   - /var/run/docker.sock:/var/run/docker.sock
    #   - /usr/local/bin/docker:/usr/local/bin/docker
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.shields.rule=Host(`shields.pwn.dev`)"
      - "traefik.http.routers.shields.entrypoints=websecure"
      - "traefik.http.routers.shields.tls.certresolver=pwn-ca"
      - "traefik.http.services.shields-service.loadbalancer.server.port=80"

#vikunja
  api-vikunja:
    container_name: api-vikunja
    image: vikunja/api:latest
    restart: unless-stopped
    networks:
      - virtual-network
    environment:
      VIKUNJA_DATABASE_HOST: db-vikunja
      VIKUNJA_DATABASE_PASSWORD: ${VIKUNJA_DATABASE_PASSWORD}
      VIKUNJA_DATABASE_TYPE: mysql
      VIKUNJA_DATABASE_USER: vikunja
      VIKUNJA_SERVICE_JWTSECRET: ${VIKUNJA_SERVICE_JWTSECRET}
    volumes:
      - /data/containers_data/vikunja/files:/app/vikunja/files
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.vikunja-api.rule=Host(`todo.pwn.dev` && PathPrefix(`/api/v1`, `/dav/`, `/.well-known/`))"
    #   - "traefik.http.routers.vikunja-api.entrypoints=websecure"
    #   - "traefik.http.routers.vikunja-api.tls.certresolver=pwn-ca"
    #   - "traefik.http.services.vikunja-api-service.loadbalancer.server.port=3456"
    depends_on:
    - "db-vikunja"

  db-vikunja:
    container_name: db-vikunja
    image: mariadb:10
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    restart: unless-stopped
    networks:
      - virtual-network
    environment:
      VIKUNJA_SERVICE_TIMEZONE: Europe/Moscow
      MYSQL_ROOT_PASSWORD: ${VIKUNJA_DATABASE_PASSWORD}
      MYSQL_USER: vikunja
      MYSQL_PASSWORD: ${VIKUNJA_DATABASE_PASSWORD}
      MYSQL_DATABASE: vikunja
    volumes:
      - /data/containers_data/vikunja/db:/var/lib/mysql

  frontend-vikunja:
    container_name: frontend-vikunja
    image: vikunja/frontend
    restart: unless-stopped
    networks:
      - virtual-network
    environment:
      VIKUNJA_API_URL: http://api-vikunja:3456/api/v1
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vikunja-frontend.rule=Host(`todo.pwn.dev`)"
      - "traefik.http.routers.vikunja-frontend.entrypoints=websecure"
      - "traefik.http.routers.vikunja-frontend.tls.certresolver=pwn-ca"
      - "traefik.http.services.vikunja-frontend-service.loadbalancer.server.port=80"
    depends_on:
    - "api-vikunja"